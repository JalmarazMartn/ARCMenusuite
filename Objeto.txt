OBJECT Codeunit 50000 Funciones BAINES
{
  OBJECT-PROPERTIES
  {
    Date=11/05/20;
    Time=17:58:33;
    Modified=Yes;
    Version List=UPG365;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      "--BAINES-0009--"@1170000001 : Integer;
      TxtEmpresa@1170000000 : Text[30];

    LOCAL PROCEDURE "--BAIN-0009--"@1170000003();
    BEGIN
    END;

    PROCEDURE T18CambiarSerieEmpresa@1170170016(VAR SalesSetup@1170000001 : Record 311;VAR NoSeriesMgt@1170000002 : Codeunit 396);
    VAR
      InfoEmpresa@1170000000 : Record 79;
    BEGIN
      //I-BAIN-0009
      InfoEmpresa.GET;
      IF InfoEmpresa."Empresa navarra" THEN BEGIN
        InfoEmpresa.TESTFIELD("Empresa numeraci¢n clientes");
        SalesSetup.CHANGECOMPANY(InfoEmpresa."Empresa numeraci¢n clientes");
        NoSeriesMgt.AsignarEmpresa(InfoEmpresa."Empresa numeraci¢n clientes");
      END;
      //F-BAIN-0009
    END;

    PROCEDURE T18DescambiarSerieEmpresa@1170170018(VAR SalesSetup@1170000000 : Record 311);
    BEGIN
      //I-BAIN-0009
      SalesSetup.CHANGECOMPANY(COMPANYNAME);
      SalesSetup.GET;
      //F-BAIN-0009
    END;

    PROCEDURE T18AsignarEmpresa@1170170008(Emp@1170170000 : Text[30]);
    BEGIN
      //I-BAIN-0009
      TxtEmpresa := Emp;
      //F-BAIN-0009
    END;

    PROCEDURE T18PasarAEmpresa@1170170005(CurrFieldNo@1170000000 : Integer;Customer@1170000002 : Record 18);
    VAR
      InfoEmpresa@1170170001 : Record 79;
      CliHasta@1170170000 : Record 18;
      Text0050002@1170000001 : TextConst 'ESP=¨Desea actualizar el cliente en %1?';
    BEGIN
      //I-BAIN-0009
      IF TxtEmpresa <> '' THEN
        InfoEmpresa.CHANGECOMPANY(TxtEmpresa);
      InfoEmpresa.GET;
      IF InfoEmpresa."Empresa asociada" = '' THEN EXIT;
      IF CurrFieldNo <> 0 THEN
        IF NOT CONFIRM(Text0050002,FALSE,InfoEmpresa."Empresa asociada") THEN
          EXIT;
      CliHasta.CHANGECOMPANY(InfoEmpresa."Empresa asociada");
      CliHasta.TRANSFERFIELDS(Customer);
      T18PdteRevision(CliHasta);
      IF NOT CliHasta.INSERT THEN BEGIN
        CliHasta.GET(Customer."No.");
        CliHasta.TRANSFERFIELDS(Customer);
        //CliHasta.PdteRevision;
        CliHasta.MODIFY;
      END;
      //F-BAIN-0009
    END;

    PROCEDURE T18PdteRevision@1170170012(VAR Customer@1170000000 : Record 18);
    BEGIN
      //I-BAIN-0009
      Customer.Blocked := Customer.Blocked::All;
      Customer."Pendiente revisar" := TRUE;
      //F-BAIN-0009
    END;

    PROCEDURE T23PasarAEmpresa@1170170006(CurrFieldNo@1170000001 : Integer;Vendor@1170000002 : Record 23);
    VAR
      InfoEmpresa@1170170001 : Record 79;
      ProvHasta@1170170000 : Record 23;
      Text0050002@1170000000 : TextConst 'ESP=¨Desea actualizar el proveedor en %1?';
    BEGIN
      //I-BAIN-0009
      IF TxtEmpresa <> '' THEN
        InfoEmpresa.CHANGECOMPANY(TxtEmpresa);
      InfoEmpresa.GET;
      IF InfoEmpresa."Empresa asociada" = '' THEN EXIT;
      IF CurrFieldNo <> 0 THEN
        IF NOT CONFIRM(Text0050002,FALSE,InfoEmpresa."Empresa asociada") THEN
          EXIT;
      ProvHasta.CHANGECOMPANY(InfoEmpresa."Empresa asociada");
      ProvHasta.TRANSFERFIELDS(Vendor);
      T23PdteRevision(ProvHasta);
      IF NOT ProvHasta.INSERT THEN BEGIN
        ProvHasta.GET(Vendor."No.");
        ProvHasta.TRANSFERFIELDS(Vendor);
        T23PdteRevision(ProvHasta);
        ProvHasta.MODIFY;
      END;
      //F-BAIN-0009
    END;

    PROCEDURE T23PdteRevision@1170000001(Vendor@1170000000 : Record 23);
    BEGIN
      //I-BAIN-0009
      Vendor.Blocked := Vendor.Blocked::All;
      Vendor."Pendiente revisar" := TRUE;
      //F-BAIN-0009
    END;

    PROCEDURE T23AsignarEmpresa@1170000000(Emp@1170170000 : Text[30]);
    BEGIN
      //I-BAIN-0009
      TxtEmpresa := Emp;
      //F-BAIN-0009
    END;

    PROCEDURE T27PasarAEmpresa@1170000005(CurrFieldNo@1170000000 : Integer;Item@1170000001 : Record 27);
    VAR
      InfoEmpresa@1170170001 : Record 79;
      ProdHasta@1170170000 : Record 27;
      Text0050002@1170000002 : TextConst 'ESP=¨Desea actualizar el producto en %1?';
    BEGIN
      //I-BAIN-0009
      IF TxtEmpresa <> '' THEN
        InfoEmpresa.CHANGECOMPANY(TxtEmpresa);
      InfoEmpresa.GET;
      IF InfoEmpresa."Empresa asociada" = '' THEN EXIT;
      IF CurrFieldNo <> 0 THEN
        IF NOT CONFIRM(Text0050002,FALSE,InfoEmpresa."Empresa asociada") THEN
          EXIT;
      ProdHasta.CHANGECOMPANY(InfoEmpresa."Empresa asociada");
      ProdHasta.TRANSFERFIELDS(Item);
      IF NOT ProdHasta.INSERT THEN BEGIN
        ProdHasta.GET(Item."No.");
        ProdHasta.TRANSFERFIELDS(Item);
        T27PdteRevision;
        ProdHasta.MODIFY;
      END;
      //F-BAIN-0009
    END;

    PROCEDURE T27PdteRevision@1170000004();
    BEGIN
      //I-BAIN-0009
      //Blocked := TRUE;
      //B-49736 "Pendiente revisar" := TRUE;
      //F-BAIN-0009
    END;

    PROCEDURE T27AsignarEmpresa@1170000002(Emp@1170170000 : Text[30]);
    BEGIN
      //I-BAIN-0009
      TxtEmpresa := Emp;
      //F-BAIN-0009
    END;

    LOCAL PROCEDURE "--BAIN-0065--"@1170000006();
    BEGIN
    END;

    PROCEDURE CalcImporteIIEE@1170170011(VAR SalesLine@1170000000 : Record 37);
    VAR
      SalesReceivablesSetup@1170000001 : Record 311;
    BEGIN
      SalesLine."IIEE Amount" := 0;
      SalesReceivablesSetup.GET;
      IF SalesReceivablesSetup."Calcular IIEE por botellas" THEN BEGIN
        SalesLine."IIEE Amount" := NumBotellas(SalesLine) * PrecioIIEEBotella(SalesLine);
        EXIT;
      END;
      SalesLine."IIEE Amount" := SalesLine.Quantity * SalesLine."IIEE Price";
    END;

    PROCEDURE PrecioIIEEBotella@1170170013(SalesLine@1170000000 : Record 37) dPrec : Decimal;
    VAR
      dGradoBot@1170170000 : Decimal;
      dNumBot@1170170001 : Decimal;
      ConfGrIIEE@1170170002 : Record 7014509;
      dVolBot@1170170003 : Decimal;
      Currency@1170000001 : Record 4;
    BEGIN
      dPrec := 0;
      IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
        EXIT;
      ConfGrIIEE.CargarDesdeLinvta(SalesLine);
      IF NOT ConfGrIIEE.FIND THEN ConfGrIIEE.INIT;
      dNumBot := NumBotellas(SalesLine);
      IF dNumBot = 0 THEN EXIT;
      dVolBot := ROUND((SalesLine."Unit Volume" * SalesLine.Quantity)/ dNumBot,0.01);
      IF NOT Currency.GET(SalesLine."Currency Code") THEN
        Currency.InitRoundingPrecision;
      //dPrec := ROUND(ConfGrIIEE.Precio * SalesLine.Grado * dVolBot/10000,
      //               Currency."Unit-Amount Rounding Precision");
    END;

    PROCEDURE NumBotellas@1170170015(SalesLine@1170000000 : Record 37) dbot : Decimal;
    VAR
      RcFormatoCaja@1170170000 : Record 7014454;
      Item@1170000001 : Record 27;
    BEGIN
      //I-VN40-0169
      dbot := 0;
      IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
        EXIT;
      Item.GET(SalesLine."No.");
      IF NOT RcFormatoCaja.GET(Item."C¢d. formato caja") THEN
        RcFormatoCaja."Cantidad botellas" := 1
      ELSE RcFormatoCaja.TESTFIELD("Cantidad botellas");
      dbot := ROUND(SalesLine."Quantity (Base)" * RcFormatoCaja."Cantidad botellas",1);
      //F-VN40-0169
    END;

    LOCAL PROCEDURE "--BAIN-0067--"@1170000007();
    BEGIN
    END;

    PROCEDURE T37TestPromotion@1170000008(CurrFieldNo@1170000001 : Integer;SalesLine@1170000000 : Record 37);
    BEGIN

      //I-160608
      IF ((SalesLine."Document Type" <> SalesLine."Document Type"::Invoice) OR (CurrFieldNo <> 0) OR (SalesLine."Shipment No." = '')) THEN
      //F-160608
      // I-080307
      IF SalesLine."Line Discount %" <> 100 THEN
        IF SalesLine."Promo Source Line No." <> SalesLine."Line No." THEN // BAIN-0067
          SalesLine.TESTFIELD(Promotion,FALSE);
      // F-080307
    END;

    LOCAL PROCEDURE "--BAIN-0010--"@1170000009();
    BEGIN
    END;

    PROCEDURE T37IVADesglosado@1170170042(SalesLine@1170000000 : Record 37) : Boolean;
    VAR
      Producto@1170170000 : Record 27;
    BEGIN
      //++ BAIN-0010
      IF (SalesLine.Type <> SalesLine.Type::Item) OR (SalesLine."No." = '') THEN
        EXIT(FALSE);
      Producto.GET(SalesLine."No.");
      EXIT(Producto."IVA desglosado");
      //-- BAIN-0010
    END;

    PROCEDURE C80RellenarLineasIVADesglosado@1170000010(VAR TempVATAmountLine@1170000000 : Record 290;VAR LinIvaDesglosado@1170000001 : Record 7014625;Invoice@1170000002 : Boolean;SalesHeader@1170000003 : Record 36;SalesCrMemoHeader@1170000004 : Record 114;SalesInvHeader@1170000005 : Record 112);
    BEGIN
      IF TempVATAmountLine.FIND('-') AND Invoice THEN
        REPEAT
          LinIvaDesglosado.TRANSFERFIELDS(TempVATAmountLine);
          IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN BEGIN
            LinIvaDesglosado."Source Document Type" := LinIvaDesglosado."Source Document Type"::"Credit Memo";
            LinIvaDesglosado."Source Document No." := SalesCrMemoHeader."No."
          END ELSE BEGIN
            LinIvaDesglosado."Source Document Type" := LinIvaDesglosado."Source Document Type"::Invoice;
            LinIvaDesglosado."Source Document No." := SalesInvHeader."No.";
          END;
          LinIvaDesglosado."Source Line No." := TempVATAmountLine."N§ l¡nea";
          LinIvaDesglosado.INSERT;
        UNTIL TempVATAmountLine.NEXT = 0;
    END;

    [EventSubscriber(Codeunit,80,OnBeforeCalcInvoiceDiscountPosting)]
    LOCAL PROCEDURE C80OnBeforeCalcInvoiceDiscountPosting@1170000011(VAR TempInvoicePostBuffer@1170000000 : TEMPORARY Record 49;VAR InvoicePostBuffer@1170000001 : Record 49;SalesHeader@1170000002 : Record 36;SalesLine@1170000003 : Record 37;TotalVAT@1170000004 : Decimal;TotalVATACY@1170000005 : Decimal;TotalAmount@1170000006 : Decimal;TotalAmountACY@1170000007 : Decimal;VAR IsHandled@1170000008 : Boolean);
    BEGIN
      IsHandled := T37IVADesglosado(SalesLine);
    END;

    [EventSubscriber(Codeunit,80,OnBeforeCalcLineDiscountPosting)]
    LOCAL PROCEDURE C80OnBeforeCalcLineDiscountPosting@1170000014(VAR TempInvoicePostBuffer@1170000000 : TEMPORARY Record 49;VAR InvoicePostBuffer@1170000001 : Record 49;SalesHeader@1170000002 : Record 36;SalesLine@1170000003 : Record 37;TotalVAT@1170000004 : Decimal;TotalVATACY@1170000005 : Decimal;TotalAmount@1170000006 : Decimal;TotalAmountACY@1170000007 : Decimal;VAR IsHandled@1170000008 : Boolean);
    BEGIN
      IsHandled := T37IVADesglosado(SalesLine);
    END;

    LOCAL PROCEDURE "--BAIN-0063--"@1170000012();
    BEGIN
    END;

    PROCEDURE "T39Importe base dto. l¡nea"@1170170024(VAR PurchLine@1170000000 : Record 39) : Decimal;
    BEGIN
      //I-BAIN-0063
      EXIT(PurchLine.Quantity * PurchLine."Precio base dto. l¡nea");
      //F-BAIN-0063
    END;

    PROCEDURE T39ActualizarDirectUnitCost@1170170030(VAR PurchLine@1170000000 : Record 39);
    BEGIN
      //I-BAIN-0063
      PurchLine.VALIDATE("Direct Unit Cost",PurchLine."Precio base dto. l¡nea"+PurchLine."Precio cargo 1"+PurchLine."Precio cargo 2");
      //F-BAIN-0063
    END;

    PROCEDURE T39ActualizarOtrosPrecios@1170170033(VAR PurchLine@1170000000 : Record 39);
    VAR
      Text50000@1170000001 : TextConst 'ESP=El %1 sale negativo. Hay que mirar %2 o %3.';
    BEGIN
      //I-BAIN-0063
      PurchLine."Precio base dto. l¡nea" := PurchLine."Direct Unit Cost" - PurchLine."Precio cargo 1" - PurchLine."Precio cargo 2";
      IF PurchLine."Precio base dto. l¡nea" < 0 THEN
        ERROR(Text50000,PurchLine.FIELDCAPTION("Precio base dto. l¡nea"),
              PurchLine.FIELDCAPTION("Precio cargo 1"),PurchLine.FIELDCAPTION("Precio cargo 2"));
      //F-BAIN-0063
    END;

    PROCEDURE C22InitValueEntry@5800(VAR Rec@1100000 : Record 83;VAR ValueEntry@1000 : Record 5802;ItemLedgEntry@1001 : Record 32);
    VAR
      CalcUnitCost@1003 : Boolean;
      CostAmt@1004 : Decimal;
      CostAmtACY@1005 : Decimal;
    BEGIN
      WITH Rec DO BEGIN
        ValueEntry."Precio base dto. l¡nea" := "Precio base dto. l¡nea";
        ValueEntry."Precio cargo 1" := "Precio cargo 1";
        ValueEntry."Precio cargo 2" := "Precio cargo 2";
      END;
    END;

    PROCEDURE T83CopyFromPurchLine@1170000013(VAR ItemJnlLine@1170000000 : Record 83;PurchaseLine@1170000002 : Record 39);
    VAR
      CurrencyExchangeRate@1170000004 : Record 330;
      PurchaseHeader@1170000001 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      //I-BAIN-0063
      WITH PurchaseLine DO BEGIN
        ItemJnlLine."Precio base dto. l¡nea" := "Precio base dto. l¡nea";
        ItemJnlLine."Precio cargo 1" := "Precio cargo 1";
        ItemJnlLine."Precio cargo 2" := "Precio cargo 2";
        IF PurchaseHeader."Currency Code" <> '' THEN BEGIN
          ItemJnlLine."Precio base dto. l¡nea" :=
              CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                PurchaseHeader."Posting Date",PurchaseHeader."Currency Code",
                ItemJnlLine."Precio base dto. l¡nea",PurchaseHeader."Currency Factor");
          ItemJnlLine."Precio cargo 1" :=
              CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                PurchaseHeader."Posting Date",PurchaseHeader."Currency Code",
                ItemJnlLine."Precio cargo 1",PurchaseHeader."Currency Factor");
          ItemJnlLine."Precio cargo 2" :=
              CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                PurchaseHeader."Posting Date",PurchaseHeader."Currency Code",
                ItemJnlLine."Precio cargo 2",PurchaseHeader."Currency Factor");
        END;
      END;
      //F-BAIN-0063
    END;

    PROCEDURE C7010FindPurchLinePrice@1170000015(VAR PurchaseLine@1170000000 : Record 39;PurchasePrice@1170000001 : Record 7012;HayDescuento@1170000002 : Boolean);
    VAR
      Item@1170000003 : Record 27;
    BEGIN
      IF HayDescuento THEN BEGIN
          Item.GET(PurchaseLine."No.");
          PurchaseLine."Precio cargo 1" := PurchasePrice."Precio cargo 1";
          PurchaseLine."Precio cargo 2" := PurchasePrice."Precio cargo 2";
          //F-BAIN-0063
          // B-0285 IF ("Cdad. en unidad medida precio" <> 0) AND
          IF // 0285 P.e. una penalizaci¢n del 100% no se calcula
            (PurchaseLine."C¢d. ud. medida precio compra" <> '') AND
          // B-0285  ("C¢d. ud. medida precio compra" = TempPurchPrice."Unit of Measure Code") THEN BEGIN
          // I-0285
            ((PurchaseLine."C¢d. ud. medida precio compra" = PurchasePrice."Unit of Measure Code") OR
              ((PurchaseLine."C¢d. ud. medida precio compra" = Item."Base Unit of Measure") AND
              (PurchasePrice."Unit of Measure Code" = ''))) THEN BEGIN
          // F-0285
          // B-0145  "Direct Unit Cost" := ROUND(TempPurchPrice."Direct Unit Cost" *
          // B-0145  "Qty. per Unit of Measure"*"Cdad. en unidad medida precio",0.0001);
          // I-0145
            PurchaseLine."Direct Unit Cost" := PurchasePrice."Direct Unit Cost" *
            PurchaseLine."Qty. per Unit of Measure"*PurchaseLine."Cdad. en unidad medida precio";
            //I-BAIN-0063
            PurchaseLine."Precio cargo 1" := PurchasePrice."Precio cargo 1" *
            PurchaseLine."Qty. per Unit of Measure"*PurchaseLine."Cdad. en unidad medida precio";
            PurchaseLine."Precio cargo 2" := PurchasePrice."Precio cargo 2" *
            PurchaseLine."Qty. per Unit of Measure"*PurchaseLine."Cdad. en unidad medida precio";
            //F-BAIN-0063
          // F-0145
          END ELSE
          //F-0087
          PurchaseLine."Direct Unit Cost" := PurchasePrice."Direct Unit Cost";
          //I-0087
          // B-0170 END;
          // TIPSA I-0170
        END
      ELSE IF (PurchaseLine."Precio unidad precio" <> 0) THEN
            PurchaseLine."Direct Unit Cost" := PurchaseLine."Precio unidad precio" *  PurchaseLine."Qty. per Unit of Measure" * PurchaseLine."Cdad. en unidad medida precio";
      T39ActualizarOtrosPrecios(PurchaseLine);
    END;

    LOCAL PROCEDURE "--BAIN-0022--"@1170000016();
    BEGIN
    END;

    [EventSubscriber(Table,18,OnBeforeInsertEvent)]
    LOCAL PROCEDURE T19OnBeforeInsert@1170000017(VAR Rec@1170000000 : Record 18;RunTrigger@1170000001 : Boolean);
    BEGIN
      Rec."Fecha alta" := WORKDATE;
    END;

    [EventSubscriber(Table,97,OnBeforeInsertEvent)]
    LOCAL PROCEDURE T97OnBeforeInsert@1170000018(VAR Rec@1170000000 : Record 97;RunTrigger@1170000001 : Boolean);
    BEGIN
      Rec.Usuario := USERID;
    END;

    [EventSubscriber(Table,97,OnBeforeModifyEvent)]
    LOCAL PROCEDURE T93OnBeforeModify@1170000020(VAR Rec@1170000000 : Record 97;VAR xRec@1170000001 : Record 97;RunTrigger@1170000002 : Boolean);
    BEGIN
      Rec.Usuario := USERID;
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE C80OnBeforePostSalesDoc@1170000019(VAR Sender@1170000000 : Codeunit 80;VAR SalesHeader@1170000001 : Record 36;CommitIsSuppressed@1170000002 : Boolean;PreviewMode@1170000003 : Boolean;VAR HideProgressWindow@1170000004 : Boolean);
    VAR
      Customer@1170000005 : Record 18;
      Msg0001@1170000006 : TextConst 'ESP=Factura debe ser seleccionado. El cliente tiene %1 %2. ¨Desea continuar?';
      ErrorUserCancel@1170000007 : TextConst 'ESP=Acci¢n cancelada a petici¢n del usuario.';
    BEGIN
      WITH SalesHeader DO BEGIN
        Customer.GET("Bill-to Customer No.");
        IF ("Document Type"="Document Type"::Order) AND
          (Customer."Tipo facturaci¢n"=Customer."Tipo facturaci¢n"::"Factura por albar n") AND
          NOT Invoice THEN
            IF NOT CONFIRM(Msg0001,FALSE,
                    Customer.FIELDCAPTION("Tipo facturaci¢n"),Customer."Tipo facturaci¢n") THEN
                    ERROR(ErrorUserCancel);
        END;
    END;

    [EventSubscriber(Codeunit,81,OnBeforeConfirmSalesPost)]
    LOCAL PROCEDURE C81OnBeforeConfirmSalesPost@1170000021(VAR SalesHeader@1170000000 : Record 36;VAR HideDialog@1170000001 : Boolean;VAR IsHandled@1170000002 : Boolean;VAR DefaultOption@1170000003 : Integer;VAR PostAndSend@1170000004 : Boolean);
    VAR
      Customer@1170000005 : Record 18;
      Selection@1170000006 : Integer;
      ShipInvoiceQst@1170000007 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;ESP=&Enviar,&Facturar,E&nviar y facturar';
    BEGIN
      {WITH SalesHeader DO BEGIN
           IF "Document Type"="Document Type"::Order THEN BEGIN
             Customer.GET("Bill-to Customer No.");
             IF Customer."Tipo facturaci¢n"=Customer."Tipo facturaci¢n"::"Factura por albar n" THEN
               Selection:= STRMENU(ShipInvoiceQst,3)
             ELSE
               Selection:= STRMENU(ShipInvoiceQst,1)
             END;
             Ship := Selection IN [1,3];
             Invoice := Selection IN[2,3];
             HideDialog:=TRUE;
        END;
      }
    END;

    LOCAL PROCEDURE "--BAIN-0057--"@1170000022();
    BEGIN
    END;

    PROCEDURE T111TransfComentarios@1170000023(VAR LineNo@1170000000 : Integer;SalesLine@1170000001 : Record 37;Final@1170000002 : Boolean;SalesShipmentLines@1170000006 : Record 111);
    VAR
      SalesShpLine@1170000005 : Record 111;
      Direccion@1170000004 : Code[10];
      Paso@1170000003 : Integer;
    BEGIN

      //I-BAIN-0057
      SalesShpLine.SETRANGE("Document No.",SalesShipmentLines."Document No.");
      IF NOT Final THEN BEGIN
        SalesShpLine.SETFILTER("Line No.",'<%1',SalesShipmentLines."Line No.");
        Direccion := '+';
        Paso := -1;
      END ELSE BEGIN
        SalesShpLine.SETFILTER("Line No.",'>%1',SalesShipmentLines."Line No.");
        Direccion := '-';
        Paso := 1;
      END;

      IF NOT SalesShpLine.FIND(Direccion) THEN EXIT;
      IF SalesShpLine.Type <> SalesShipmentLines.Type::" " THEN EXIT;

      REPEAT
        IF SalesShpLine.Type = SalesShpLine.Type::" " THEN
          SalesShpLine.MARK(TRUE);
      UNTIL ((SalesShpLine.NEXT(Paso) = 0) OR (SalesShpLine.Type <> SalesShpLine.Type::" "));

      IF Final AND (SalesShpLine.Type <> SalesShpLine.Type::" ") THEN EXIT;

      SalesShpLine.MARKEDONLY(TRUE);

      IF NOT SalesShpLine.FIND('-') THEN EXIT;
      REPEAT
        SalesLine.INIT;
        SalesLine."Line No." := LineNo;
        SalesLine.Description := SalesShpLine.Description;
        SalesLine."Description 2" := SalesShpLine."Description 2";
        SalesLine.INSERT;
        LineNo := LineNo + 10000;
      UNTIL SalesShpLine.NEXT = 0;
      //F-BAIN-0057
    END;

    LOCAL PROCEDURE "--BAIN-0070"@1170000024();
    BEGIN
    END;

    PROCEDURE TestearMovsComercializadora@1170170000(mLinDiaProd@1170170000 : Record 83;bError@1170170004 : Boolean) bTotalmente : Boolean;
    VAR
      MovProd@1170170001 : Record 32;
      MovProd2@1170170002 : Record 32;
    BEGIN
      //I-BAIN-0070
      IF mLinDiaProd."N§ mov. interempresa" = 0 THEN EXIT;
      IF mLinDiaProd."Empresa comercializadora" = '' THEN EXIT;
      MovProd.SETCURRENTKEY("N§ mov. interempresa","Empresa comercializadora");
      MovProd.SETRANGE("N§ mov. interempresa",mLinDiaProd."N§ mov. interempresa");
      MovProd.SETRANGE("Empresa comercializadora",mLinDiaProd."Empresa comercializadora");
      bTotalmente := MovProd.FIND('-');
      EXIT;
      MovProd.CALCSUMS(Quantity);

      MovProd2.CHANGECOMPANY(mLinDiaProd."Empresa comercializadora");
      MovProd2.GET(mLinDiaProd."N§ mov. interempresa");

      IF mLinDiaProd."Entry Type" IN
         [mLinDiaProd."Entry Type"::Sale,
          mLinDiaProd."Entry Type"::"Negative Adjmt.",
          mLinDiaProd."Entry Type"::Transfer,
          mLinDiaProd."Entry Type"::Consumption]
      THEN BEGIN
        mLinDiaProd.Quantity := -mLinDiaProd.Quantity;
      END ELSE BEGIN
        mLinDiaProd.Quantity := mLinDiaProd.Quantity;
      END;



      IF MovProd.Quantity + mLinDiaProd.Quantity < MovProd2.Quantity THEN BEGIN
        IF bError THEN
          ERROR('El movimiento %1 de la empresa %2 ya ha sido descontado totalmente.',
              mLinDiaProd."N§ mov. interempresa",mLinDiaProd."Empresa comercializadora");
        bTotalmente := TRUE;
      END;
      //F-BAIN-0070
    END;

    [EventSubscriber(Codeunit,22,OnAfterInsertItemLedgEntry)]
    LOCAL PROCEDURE C22OnAfterInitItemLedgEntry@1170000025(VAR ItemLedgerEntry@1170000000 : Record 32;ItemJournalLine@1170000001 : Record 83;VAR ItemLedgEntryNo@1170000002 : Integer;VAR ValueEntryNo@1170000003 : Integer;VAR ItemApplnEntryNo@1170000004 : Integer);
    BEGIN

      ItemLedgerEntry."N§ mov. interempresa" := ItemJournalLine."N§ mov. interempresa";
      ItemLedgerEntry."Empresa comercializadora" := ItemJournalLine."Empresa comercializadora";
      IF TestearMovsComercializadora(ItemJournalLine,TRUE) THEN;
    END;

    LOCAL PROCEDURE "--BAIN-0023--"@1170000028();
    BEGIN
    END;

    [EventSubscriber(Table,36,OnAfterCopySellToCustomerAddressFieldsFromCustomer)]
    LOCAL PROCEDURE T36OnAfterCopySellToCustomerAddressFieldsFromCustomer@1170000026(VAR SalesHeader@1170000000 : Record 36;SellToCustomer@1170000001 : Record 18;CurrentFieldNo@1170000002 : Integer);
    BEGIN
      SalesHeader."Pay-at Code" := SellToCustomer."C¢d. direcci¢n postal";
    END;

    LOCAL PROCEDURE "--BAIN-0050--"@1170000027();
    BEGIN
    END;

    [EventSubscriber(Codeunit,91,OnBeforeConfirmPost)]
    LOCAL PROCEDURE C91OnBeforeConfirmPost@1170000029(VAR PurchaseHeader@1170000000 : Record 38;VAR HideDialog@1170000001 : Boolean;VAR IsHandled@1170000002 : Boolean;VAR DefaultOption@1170000003 : Integer);
    VAR
      Customer@1170000005 : Record 18;
      Selection@1170000006 : Integer;
      ReceiveInvoiceQst@1170000004 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice;ESP=&Recibir,&Facturar,R&ecibir y facturar';
    BEGIN
      WITH PurchaseHeader DO BEGIN
           IF "Document Type"="Document Type"::Order THEN
               Selection:= STRMENU(ReceiveInvoiceQst,1);
           Receive := Selection IN [1,3];
           Invoice := Selection IN[2,3];
           HideDialog:=TRUE;
        END;
    END;

    LOCAL PROCEDURE "--19143--"@1170000031();
    BEGIN
    END;

    [EventSubscriber(Table,18,OnBeforeCheckBlockedCust)]
    LOCAL PROCEDURE T18OnBeforeCheckBlockedCust@1170000030(Customer@1170000000 : Record 18;Source@1170000001 : 'Journal,Document';DocType@1170000002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Shipment@1170000003 : Boolean;Transaction@1170000004 : Boolean;VAR IsHandled@1170000005 : Boolean);
    BEGIN

      WITH Customer DO BEGIN
        IF ((Blocked = Blocked::All) OR
           ((Blocked = Blocked::Invoice) AND (DocType = DocType::Quote) OR
           ((Blocked = Blocked::Ship) AND (DocType = DocType::Quote) AND (NOT Transaction)) OR
           ((Blocked = Blocked::Ship) AND (DocType = DocType::Quote) AND Shipment AND Transaction)))
        THEN
          // I-19143
          IF (DocType = DocType::Quote) AND NOT Transaction THEN BEGIN
            CustBlockedMessage(Customer);
            IsHandled:=TRUE;
          END;
      END;
    END;

    PROCEDURE CustBlockedMessage@1170170009(Customer@1001 : Record 18);
    VAR
      Action@1002 : Text[30];
      Text001@1170000000 : TextConst 'ENU=You cannot %1 this type of document when Customer %2 is blocked with type %3;ESP=No puede %1 este tipo de documento cuando el cliente %2 est  bloqueado por el tipo %3';
    BEGIN
      MESSAGE(Text001,Customer."No.",Customer.Blocked); // 19143
    END;

    LOCAL PROCEDURE "--BAIN-0006--"@1170000032();
    BEGIN
    END;

    PROCEDURE CheckCurrency@10(CurrCode@1100000 : Code[10];VAR LCY@1100001 : 'Peseta,Euro,Other') : Boolean;
    VAR
      CarteraSetup@1100002 : Record 7000016;
      Text1100010@1170000001 : TextConst 'ENU=At least %1 or %2 must be different from blank.;ESP=Al menos %1 o %2 debe ser diferente de blanco.';
      Text1100011@1170000000 : TextConst 'ENU=%1 should be different from %2 in table %3.;ESP=%1 deberia ser diferente de %2 en tabla %3.';
    BEGIN
      CarteraSetup.GET();
      WITH CarteraSetup DO BEGIN
        CASE TRUE OF
          "Euro Currency Code" = '': LCY := LCY::Euro;
          ELSE
            LCY := LCY::Other;
        END;
        IF (CurrCode = "Euro Currency Code") THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE CheckBankSufix@9(SufixBankAccNo@1100000 : Code[20];BillGrBankAccNo@1100001 : Code[20]) : Boolean;
    BEGIN
      IF SufixBankAccNo <> BillGrBankAccNo THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE DocType3@1170000033(CodForPago@1170170000 : Code[10]) : Code[10];
    VAR
      PaymentMethod@1170170001 : Record 289;
      MensajeError@1170000000 : TextConst 'ESP=No se puede utilizar %1 en la exportaci¢n CSB norma 68.';
    BEGIN
      //I-BAIN-0006
      WITH PaymentMethod DO BEGIN
        GET(CodForPago);
        CASE "Bill Type" OF
          "Bill Type"::IOU:
            EXIT('3');
          "Bill Type"::Check:
            EXIT('4');
          "Bill Type"::Transfer:
            EXIT('5');
          ELSE
            ERROR(MensajeError,CodForPago);
        END;
      END;
      //F-BAIN-0006
    END;

    PROCEDURE GetRegisterCode@8(CurrCode@1100000 : Code[10];VAR RegisterCode@1100001 : Integer;VAR RegisterString@1100002 : Text[2]) : Boolean;
    VAR
      CarteraSetup@1100003 : Record 7000016;
    BEGIN
      WITH CarteraSetup DO BEGIN
        GET();
        CASE TRUE OF
          CurrCode = "Euro Currency Code":
            BEGIN
              RegisterCode := 50;
              RegisterString := '65';
              EXIT(TRUE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE "--BAIN-0035--"@1170000034();
    BEGIN
    END;

    PROCEDURE ComentarioAviso@1170170007(Vendor@1170000001 : Record 23);
    VAR
      CommentLine@1170000000 : Record 97;
    BEGIN
      //I-BAIN-0035
      CommentLine.RESET;
      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Vendor);
      CommentLine.SETRANGE("No.",Vendor."No.");
      CommentLine.SETRANGE(Aviso,TRUE);
      CommentLine.SETFILTER("Fecha final aviso",'%1|>%2',
                            0D,WORKDATE);
      IF CommentLine.FIND('-') THEN REPEAT
        MESSAGE(CommentLine.Comment);
      UNTIL CommentLine.NEXT = 0;
      //F-BAIN-0035
    END;

    PROCEDURE ComentarioVisible@1170000035(VisibleControl@1170000000 : Boolean;CommentLine@1170000001 : Record 97);
    BEGIN
      VisibleControl  := CommentLine."Table Name"=CommentLine."Table Name"::Vendor;
    END;

    [EventSubscriber(Table,38,OnAfterCheckPayToVendor)]
    LOCAL PROCEDURE T38OnAfterCheckPayToVendor@1170000036(VAR PurchaseHeader@1170000000 : Record 38;xPurchaseHeader@1170000001 : Record 38;Vendor@1170000002 : Record 23);
    VAR
      FuncionesBAINES@1170000003 : Codeunit 50000;
    BEGIN
      FuncionesBAINES.ComentarioAviso(Vendor);
    END;

    LOCAL PROCEDURE "--BAIN-0052--"@1170000037();
    BEGIN
    END;

    PROCEDURE Prefacturado@1170170001(SalesShipmentHeader@1170000001 : Record 110) : Boolean;
    VAR
      SalesShipmentLine@1170000000 : Record 111;
    BEGIN
      //I-BAIN-0052
      SalesShipmentLine.RESET;
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesShipmentLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
      SalesShipmentLine.SETRANGE(Prefacturado,FALSE);
      EXIT(NOT SalesShipmentLine.FIND('-'));
      //F-BAIN-0052
    END;

    [EventSubscriber(Codeunit,64,OnBeforeTransferLineToSalesDoc)]
    LOCAL PROCEDURE C64OnBeforeTransferLineToSalesDoc@1170000038(VAR SalesShipmentHeader@1170000000 : Record 110;VAR SalesShipmentLine@1170000001 : Record 111;VAR SalesHeader@1170000002 : Record 36;VAR TransferLine@1170000003 : Boolean);
    BEGIN
      SalesShipmentLine.CALCFIELDS(Prefacturado);
      SalesShipmentLine.TESTFIELD(Prefacturado,FALSE);
    END;

    LOCAL PROCEDURE "--BAIN XXXX--"@1170000039();
    BEGIN
    END;

    [EventSubscriber(Page,6510,OnClosePageEvent)]
    LOCAL PROCEDURE P6510OnClosePage@1170000041(VAR Rec@1170000000 : Record 336);
    VAR
      ReservationEntry@1170000001 : Record 337;
      SalesLine@1170000002 : Record 37;
    BEGIN
      WITH Rec DO BEGIN
        ReservationEntry.SETRANGE("Source Type","Source Type");
        ReservationEntry.SETRANGE("Source ID","Source ID");
        ReservationEntry.SETRANGE("Source Ref. No.","Source Ref. No.");
        IF ReservationEntry.COUNT=1 THEN BEGIN
          ReservationEntry.FINDFIRST;
          ReservationEntry."Quantity (Price UOM)"         := "Quantity (Price UOM)";
          ReservationEntry."Price Unit Of Measure Code"   := "Price Unit Of Measure Code";
          ReservationEntry.MODIFY;
          IF "Source Type"=37 THEN BEGIN
            SalesLine.GET("Source Subtype","Source ID","Source Ref. No.");
            SalesLine.VALIDATE("Price Unit Of Measure Code","Price Unit Of Measure Code");
            SalesLine.VALIDATE("Quantity (Price UOM)","Quantity (Price UOM)");
            SalesLine.MODIFY;
            END;
          END;
      END;
    END;

    BEGIN
    {
      ++ BAIN-0009
      ++ BAIN-0065
      ++ BAIN-0067
      ++ BAIN-0010
      ++ BAIN-0063
      ++ BAIN-0022
      ++ BAIN-0050
      ++ 1943
      ++ BAIN-0035
      ++ BAIN-0052
    }
    END.
  }
}

OBJECT Codeunit 50005 Gesti¢n Baines
{
  OBJECT-PROPERTIES
  {
    Date=29/04/20;
    Time=12:30:12;
    Modified=Yes;
    Version List=BAN;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BAIN0049001@1170170001 : TextConst 'ESP=No se encuentra l¡nea anterior.';
      BAIN0049002@1170170000 : TextConst 'ESP=Margen incumplido no puede ser No.';
      Text50000@1170170002 : TextConst 'ESP=Debe ser autorizado porque no cumple el margen m¡nimo';
      Text0050002@1170170003 : TextConst 'ESP=Se va a crear una factura para el env¡o %1 ¨Est  de acuerdo?';
      Text7014501@1170170004 : TextConst 'ESP=Acci¢n cancelada a petici¢n del usuario.';
      Text0050001@1170170005 : TextConst 'ESP=Factura debe ser seleccionado. El cliente tiene %1 %2. ¨Desea continuar?';
      ConfRegistro@1170170007 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;ESP=&Enviar,E&nviar y asignar factura';
      ConfFactura@1170170006 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;ESP=¨Desea contabilizar la factura N§ %1?';
      ErrExistePrefactura@1170170008 : TextConst 'ESP=Existe una factura sin registrar para ese albar n';

    [EventSubscriber(Table,37,OnAfterUpdateUnitPrice)]
    LOCAL PROCEDURE ComisionTraerDespuesDeActualizarPrecioLinVenta@1170170000(VAR SalesLine@1170170000 : Record 37;xSalesLine@1170170001 : Record 37;CalledByFieldNo@1170170002 : Integer;CurrFieldNo@1170170003 : Integer);
    VAR
      ConfComision@1170170004 : Record 7014622;
      SalesHeader@1170170005 : Record 36;
    BEGIN
      //I-BAIN-0025
      WITH SalesLine DO BEGIN
        IF NOT SalesHeader.GET("Document Type","Document No.") THEN
          EXIT;
        IF "Bill-to Customer No." = '' THEN
          ConfComision.INIT
        ELSE
        ConfComision.BuscarComision(SalesHeader,SalesLine);
        "% comisi¢n" := ConfComision."% comisi¢n";
      END;
    END;

    [EventSubscriber(Table,37,OnAfterUpdateAmounts)]
    LOCAL PROCEDURE ComisionCalcularImporteDespuesDeActualizarImporteLinVenta@1170170003(VAR SalesLine@1170170000 : Record 37;VAR xSalesLine@1170170001 : Record 37;CurrentFieldNo@1170170002 : Integer);
    BEGIN
      WITH SalesLine DO
        VALIDATE("% comisi¢n");
    END;

    [EventSubscriber(Codeunit,80,OnAfterDivideAmount)]
    LOCAL PROCEDURE ComisionDividirImporteAlRegistrarVenta@1170170001(SalesHeader@1170170000 : Record 36;VAR SalesLine@1170170001 : Record 37;QtyType@1170170002 : 'General,Invoicing,Shipping';SalesLineQty@1170170003 : Decimal;VAR TempVATAmountLine@1170170004 : TEMPORARY Record 290;VAR TempVATAmountLineRemainder@1170170005 : TEMPORARY Record 290);
    VAR
      Currency@1170170006 : Record 4;
    BEGIN
      WITH SalesLine DO BEGIN
        Currency.Initialize("Currency Code");
        IF Quantity <> 0 THEN
                "Importe comisi¢n (DL)" :=
                  ROUND("Importe comisi¢n (DL)" * SalesLineQty / Quantity,Currency."Amount Rounding Precision")
        ELSE
          SalesLine."Importe comisi¢n (DL)" := 0;
      END;
    END;

    [EventSubscriber(Codeunit,80,OnAfterReverseAmount)]
    LOCAL PROCEDURE ComisionInvertirSignoImporteAlRegistrarVenta@1170170004(VAR SalesLine@1170170000 : Record 37);
    BEGIN
      WITH SalesLine DO
        "Importe comisi¢n (DL)" := -"Importe comisi¢n (DL)";
    END;

    [EventSubscriber(Codeunit,80,OnAfterIncrAmount)]
    LOCAL PROCEDURE ComisionIncrementarImporteAlRegistrarVenta@1170170005(VAR TotalSalesLine@1170170000 : Record 37;SalesLine@1170170001 : Record 37;SalesHeader@1170170002 : Record 36);
    BEGIN
      WITH SalesLine DO
        TotalSalesLine."Importe comisi¢n (DL)" := TotalSalesLine."Importe comisi¢n (DL)" + "Importe comisi¢n (DL)";
    END;

    PROCEDURE ConjuntoLookpNoLinVenta@1170170002(VAR SalesLine@1170170000 : Record 37);
    VAR
      FmProd@1170170007 : Page 31;
      FmRec@1170170006 : Page 77;
      FmCta@1170170005 : Page 18;
      FmTxtStd@1170170004 : Page 8;
      FmActFijo@1170170003 : Page 5601;
      FmCargo@1170170002 : Page 5800;
      Prod@1170170001 : Record 27;
      StdTxt@1170170008 : Record 7;
      GLAcc@1170170009 : Record 15;
      Item@1170170010 : Record 27;
      Resource@1170170011 : Record 156;
      FA@1170170012 : Record 5600;
      ItemCharge@1170170013 : Record 5800;
    BEGIN
      WITH SalesLine DO BEGIN
        // I-23069
        CASE Type OF
          Type::" ":
            BEGIN
              CLEAR(FmTxtStd);
              FmTxtStd.LOOKUPMODE := TRUE;
              IF "No." <> '' THEN
                IF StdTxt.GET("No.") THEN
                  FmTxtStd.SETRECORD(StdTxt);
              IF FmTxtStd.RUNMODAL = ACTION::LookupOK THEN BEGIN
                FmTxtStd.GETRECORD(StdTxt);
                VALIDATE("No.",StdTxt.Code);
              END;
            END;
          Type::"G/L Account":
            BEGIN
              CLEAR(FmCta);
              FmCta.LOOKUPMODE := TRUE;
              IF "No." <> '' THEN
                IF GLAcc.GET("No.") THEN
                  FmCta.SETRECORD(GLAcc);
              IF FmCta.RUNMODAL = ACTION::LookupOK THEN BEGIN
                FmCta.GETRECORD(GLAcc);
                VALIDATE("No.",GLAcc."No.");
              END;
            END;
          Type::Item:
            BEGIN
              CLEAR(FmProd);
              FmProd.LOOKUPMODE := TRUE;
              IF "No." <> '' THEN
                IF Prod.GET("No.") THEN
                  FmProd.SETRECORD(Prod);
              IF "C¢d. conjunto" <> '' THEN BEGIN // 311014
              Prod.SETCURRENTKEY("C¢d. conjunto");
              Prod.SETRANGE("C¢d. conjunto","C¢d. conjunto");
              END; // 311014
              FmProd.SETTABLEVIEW(Prod);
              IF FmProd.RUNMODAL = ACTION::LookupOK THEN BEGIN
                FmProd.GETRECORD(Item);
                VALIDATE("No.",Item."No.");
              END;
            END;
          Type::Resource:
            BEGIN
              CLEAR(FmRec);
              FmRec.LOOKUPMODE := TRUE;
              IF "No." <> '' THEN
                IF Resource.GET("No.") THEN
                  FmRec.SETRECORD(Resource);
              IF FmRec.RUNMODAL = ACTION::LookupOK THEN BEGIN
                FmRec.GETRECORD(Resource);
                VALIDATE("No.",Resource."No.");
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              CLEAR(FmActFijo);
              FmActFijo.LOOKUPMODE := TRUE;
              IF "No." <> '' THEN
                IF FA.GET("No.") THEN
                  FmActFijo.SETRECORD(FA);
              IF FmActFijo.RUNMODAL = ACTION::LookupOK THEN BEGIN
                FmActFijo.GETRECORD(FA);
                VALIDATE("No.",FA."No.");
              END;
            END;
          Type::"Charge (Item)":
            BEGIN
              CLEAR(FmCargo);
              FmCargo.LOOKUPMODE := TRUE;
              IF "No." <> '' THEN
                IF ItemCharge.GET("No.") THEN
                  FmCargo.SETRECORD(ItemCharge);
              IF FmCargo.RUNMODAL = ACTION::LookupOK THEN BEGIN
                FmCargo.GETRECORD(ItemCharge);
                VALIDATE("No.",ItemCharge."No.");
              END;
            END;
        END;
        // F-23069
      END;
    END;

    [EventSubscriber(Table,37,OnValidateNoOnCopyFromTempSalesLine)]
    LOCAL PROCEDURE ConjuntoDespuesDeValidarNoCopiarTempLinesLinVenta@1170170007(VAR SalesLine@1170170000 : Record 37;VAR TempSalesLine@1170170001 : TEMPORARY Record 37);
    VAR
      Item@1170170003 : Record 27;
    BEGIN
      //I-23069
      SalesLine."C¢d. conjunto" := TempSalesLine."C¢d. conjunto";
      //F-23069
    END;

    [EventSubscriber(Table,37,OnAfterAssignFieldsForNo)]
    LOCAL PROCEDURE ConjuntoDespuesDeIniciarNoLinVenta@1170170006(VAR SalesLine@1170170000 : Record 37;VAR xSalesLine@1170170001 : Record 37;SalesHeader@1170170002 : Record 36);
    VAR
      Item@1170170003 : Record 27;
    BEGIN
      //I-23069
      WITH SalesLine DO BEGIN
        IF Type <> Type::Item THEN
          EXIT;
        IF Item.GET("No.") THEN
          "C¢d. conjunto" := Item."C¢d. conjunto";
      END;
      //F-23069
    END;

    [EventSubscriber(Table,7023,OnAfterValidateEvent,"Item No.")]
    LOCAL PROCEDURE TarifaCosteAlValidarProductoHojaTarifas@1170170008(VAR Rec@1170170000 : Record 7023;VAR xRec@1170170001 : Record 7023;CurrFieldNo@1170170002 : Integer);
    VAR
      RcItems@1170170003 : Record 27;
      RcProveedor@1170170004 : Record 23;
    BEGIN
      //I-BAIN-060308
      WITH Rec DO BEGIN
        IF NOT RcItems.GET("Item No.") THEN
          RcItems.INIT;
        IF RcProveedor.GET(RcItems."Vendor No.") THEN BEGIN
          "N§  Proveedor" := RcProveedor."No.";
          "Nombre proveedor" := RcProveedor.Name;
        END;
      END;
      //F-BAIN-060308
    END;

    [EventSubscriber(Table,37,OnAfterUpdateUnitPrice)]
    LOCAL PROCEDURE MargenMinimoTraerALinventaDespuesDeActualizarPrecioLinVenta@1170170009(VAR SalesLine@1170170000 : Record 37;xSalesLine@1170170001 : Record 37;CalledByFieldNo@1170170002 : Integer;CurrFieldNo@1170170003 : Integer);
    BEGIN
      MargenMinimoTraerLinVenta(SalesLine);
    END;

    [EventSubscriber(Table,37,OnAfterUpdateAmounts)]
    LOCAL PROCEDURE MargenMinimoCalcularMargenRealDespuesDeActualizarImporteLinVenta@1170170016(VAR SalesLine@1170170000 : Record 37;VAR xSalesLine@1170170001 : Record 37;CurrentFieldNo@1170170002 : Integer);
    BEGIN
      MargenminimoCalcMargenRealLinVenta(SalesLine);
    END;

    PROCEDURE MargenMinimoTraerLinVenta@1170170029(VAR SalesLine@1170170001 : Record 37);
    VAR
      MargenMin@1170170000 : Record 50005;
    BEGIN
        //I-BAIN-0034
      WITH SalesLine DO BEGIN
        IF NOT MargenMin.GET(MargenMin."Sales Type"::"Customer Price Group",
                             "Customer Price Group",
                             "No.") THEN MargenMin.INIT;
        "% margen m¡nimo" := MargenMin."% margen";
      END;
        //F-BAIN-0034
    END;

    PROCEDURE MargenminimoCalcMargenRealLinVenta@1170170035(VAR SalesLine@1170170005 : Record 37);
    VAR
      ImporteBase@1170170000 : Decimal;
      Currency2@1170170001 : Record 4;
      LinVta@1170170002 : Record 37;
      Prod2@1170170003 : Record 27;
      ImpCosteTarifa@1170170004 : Decimal;
      Item@1170170006 : Record 27;
      CurrExchRate@1170170007 : Record 330;
      SalesHeader@1170170008 : Record 36;
      LinVentaTot@1170170009 : Record 37;
    BEGIN
      //I-BAIN-0034
      // BAIN-0049 Cuidad¡n que aqu¡ no se calcula autom tico siempre para las l¡neas de promoci¢n. S¢lo se calcula
      // en el informe y al registrar
      WITH SalesLine DO BEGIN
        Item."No." := '';
        IF (Type <> Type::Item) OR ("No." = '') THEN BEGIN
          "% margen real" := 0;
          EXIT;
        END;
        IF NOT Item.GET("No.") THEN
          Item.INIT;
        IF (Item."Precio coste tarifa" = 0) OR ("Quantity (Base)" = 0)  THEN BEGIN
          "% margen real" := 0;
          EXIT;
        END;
        // I-BAIN-0049
        IF Promotion THEN BEGIN
          "% margen real" := 0;
          EXIT;
        END;
        // F-BAIN-0049
        ImporteBase := "Line Amount" - "Inv. Discount Amount" - "Pmt. Discount Amount";
        IF NOT SalesHeader.GET("Document Type","Document No.") THEN
          SalesHeader.INIT;
        IF "Currency Code" <> '' THEN BEGIN
          GetSalesHeader;
          Currency2.GET("Currency Code");
          ImporteBase :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                WORKDATE,"Currency Code",
                ImporteBase,SalesHeader."Currency Factor"),
                Currency2."Amount Rounding Precision")
        END;
        // I-BAIN-0049
        LinVentaTot.RESET;
        // b-18017  LinVentaTot.SETCURRENTKEY("N§ promoci¢n",Promoci¢n);
        LinVentaTot.SETCURRENTKEY("Promo No.",Promotion);  // 18017
        LinVentaTot.SETRANGE("Promo No.","Promo No.");
        LinVentaTot.SETRANGE(Promotion,TRUE);
        LinVentaTot.SETRANGE("Promo Source Line No.","Line No.");
        LinVentaTot.SETRANGE(Type,LinVentaTot.Type::Item);  // 18017
        ImpCosteTarifa := Item."Precio coste tarifa" * "Quantity (Base)";
        IF LinVentaTot.FIND('-') THEN REPEAT
          // b-18017  IF (LinVentaTot.Type = LinVentaTot.Type::Item) AND (Prod2.GET(LinVentaTot."No.")) THEN
          IF Prod2.GET(LinVentaTot."No.") THEN  // 18017
            ImpCosteTarifa += Item."Precio coste tarifa" * LinVentaTot."Quantity (Base)";
        UNTIL LinVentaTot.NEXT = 0;

        "% margen real" := ((ImporteBase * 100) / ImpCosteTarifa) - 100;
        // F-BAIN-0049
      END;
    END;

    PROCEDURE MargenMinimoAutorizar@1170170031(VAR SalesLine@1170170001 : Record 37);
    VAR
      ConfUsu@1170170000 : Record 91;
    BEGIN
      WITH SalesLine DO BEGIN
        //I-BAIN-0034
        // B-BAIN-0049 TESTFIELD("Margen incumplido");
        // I-BAIN-0049
        IF NOT MargenMinimoIncumplidoLinVenta(SalesLine) THEN
          ERROR(BAIN0049002);
        // F-BAIN-0049
        ConfUsu.GET(USERID);
        ConfUsu.TESTFIELD("Autoriza margen m¡nimo ventas");
        "Usuario autorizaci¢n margen" := USERID;
      END;
        //F-BAIN-0034
    END;

    PROCEDURE MargenMinimoComprobarAutorizaci¢n@1170170037(VAR SalesLine@1170170000 : Record 37);
    VAR
      ConfVtas@1170170001 : Record 311;
    BEGIN
      WITH SalesLine DO BEGIN
        //I-BAIN-0034
        IF "Document Type" IN ["Document Type"::"Credit Memo",
                               "Document Type"::"Return Order"] THEN EXIT;
        IF Type <> Type::Item THEN EXIT;

        IF NOT MargenMinimoIncumplidoLinVenta(SalesLine) THEN EXIT;
        ConfVtas.GET;
        IF NOT ConfVtas."Bloqueo margen m¡nimo ventas" THEN EXIT;
        IF "Usuario autorizaci¢n margen" = '' THEN
          FIELDERROR("Usuario autorizaci¢n margen",Text50000);
        //F-BAIN-0034
      END;
    END;

    PROCEDURE MargenMinimoIncumplidoLinVenta@1170170039(SalesLine@1170170000 : Record 37) : Boolean;
    VAR
      Item@1170170001 : Record 27;
    BEGIN
      WITH SalesLine DO BEGIN
        // I-BAIN-0049
        MargenminimoCalcMargenRealLinVenta(SalesLine);
        IF NOT Item.GET("No.") THEN
          Item.INIT;
        IF (Type <> Type::Item) OR ("No." = '') OR (Item."Precio coste tarifa" = 0) OR ("Quantity (Base)" = 0) OR Promotion THEN
          EXIT(FALSE);
        EXIT("% margen m¡nimo" > "% margen real");
        // F-BAIN-0049
      END;
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE MargenMinimoComprobarAntesRegistrarVenta@1170170020(VAR Sender@1170170000 : Codeunit 80;VAR SalesHeader@1170170001 : Record 36;CommitIsSuppressed@1170170002 : Boolean;PreviewMode@1170170003 : Boolean;VAR HideProgressWindow@1170170004 : Boolean);
    VAR
      SalesLine@1170170005 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF NOT FINDSET THEN
          EXIT;
        REPEAT
          MargenMinimoComprobarAutorizaci¢n(SalesLine);
        UNTIL NEXT = 0;
      END;
    END;

    [EventSubscriber(Codeunit,6620,OnAfterInitSalesLineFields)]
    LOCAL PROCEDURE MargenMinimoInicializarUsarioAlCopiarDoc@1170170010(VAR SalesLine@1170170000 : Record 37);
    BEGIN
      SalesLine."Usuario autorizaci¢n margen" := '';
    END;

    [EventSubscriber(Table,37,OnBeforeInsertEvent)]
    LOCAL PROCEDURE PromocionManualPonerLineapromoAlInsertarLinVenta@1170170011(VAR Rec@1170170000 : Record 37;RunTrigger@1170170001 : Boolean);
    BEGIN
      // I-BAIN-0049
      WITH Rec DO BEGIN
      IF ("Promo Code" <> '') AND ("Promo Source Line No." = 0) THEN BEGIN
        "Promo Source Line No." := PromocionManualBuscaLineaBasePromo(Rec);
        IF "Promo Source Line No." = 0 THEN
          ERROR(BAIN0049001);
      END;
      // F-BAIN-0049
      END;
    END;

    PROCEDURE PromocionManualBuscaLineaBasePromo@1170170026(SalesLine@1170170001 : Record 37) : Integer;
    VAR
      LinVta@1170170000 : Record 37;
    BEGIN
      // I-BAIN-0049
      WITH SalesLine DO BEGIN
        LinVta.SETRANGE("Document Type","Document Type");
        LinVta.SETRANGE("Document No.","Document No.");
        LinVta.SETRANGE("Line No.",0,"Line No." - 1);
        LinVta.SETRANGE(Type,Type::Item);
        LinVta.SETRANGE(Promotion,FALSE);
        // B-BAIN-0119  IF NOT LinVta.FIND('-') THEN
        IF NOT LinVta.FIND('+') THEN  // BAIN-0119
          EXIT(0);
        EXIT(LinVta."Line No.");
      END;
      // F-BAIN-0049
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"Promo Code")]
    LOCAL PROCEDURE PromocionManualGrabarAlValoidarCodigoPromocionLinVenta@1170170021(VAR Rec@1170170000 : Record 37;VAR xRec@1170170001 : Record 37;CurrFieldNo@1170170002 : Integer);
    BEGIN
      // I-BAIN-0049
      WITH Rec DO BEGIN
        IF "Promo Code" <> '' THEN BEGIN
          Promotion := TRUE;
          "Promoci¢n manual" := TRUE;
          VALIDATE("Line Discount %",100);
          IF "Line No." <> 0 THEN BEGIN
            "Promo Source Line No." := PromocionManualBuscaLineaBasePromo(Rec);
            IF "Promo Source Line No." = 0 THEN
              ERROR(BAIN0049001);
          END;
        END;
      END;
      // F-BAIN-0049
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE PromocionManualComprobarAntesRegistrarVenta@1170170012(VAR Sender@1170170000 : Codeunit 80;VAR SalesHeader@1170170001 : Record 36;CommitIsSuppressed@1170170002 : Boolean;PreviewMode@1170170003 : Boolean;VAR HideProgressWindow@1170170004 : Boolean);
    VAR
      SalesSetup@1170170005 : Record 311;
      SalesLine@1170170006 : Record 37;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Prom. oblig. l¡ns.importe cero" THEN
        EXIT;
      WITH SalesHeader DO BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETRANGE(SalesLine."Line Type",SalesLine."Line Type"::Normal);
        SalesLine.SETRANGE("Line Amount",0);
        IF SalesLine.FIND('-') THEN REPEAT
            SalesLine.TESTFIELD("Promo Code");
            SalesLine.TESTFIELD(Promotion);
            SalesLine.TESTFIELD("Promo Source Line No.");
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    [EventSubscriber(Codeunit,7014458,OnBeforeBorrarLineasPromocion)]
    LOCAL PROCEDURE PromocionManualOnBeforeBorrarLineasPromocionCalcPromo@1170170013(VAR SalesLine@1170170000 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Promoci¢n manual",FALSE);
    END;

    [EventSubscriber(Codeunit,7014458,OnBeforeReturnExistePromocion)]
    LOCAL PROCEDURE PromocionManualOnBeforeReturnExistePromocion@1170170017(VAR SalesLine@1170170000 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Promoci¢n manual",FALSE);
    END;

    [EventSubscriber(Codeunit,7014458,OnBeforeInsertarLineaPromocion)]
    LOCAL PROCEDURE PromocionManualOnBeforeOnBeforeInsertarLineaPromocion@1170170014(VAR SalesLineOrigen@1170170000 : Record 37;VAR SalesLinePromocion@1170170001 : Record 37);
    VAR
      LinVtaPromoMan@1170170002 : Record 37;
    BEGIN
      // I-BAIN-0049
      MargenminimoCalcMargenRealLinVenta(SalesLineOrigen);
      SalesLineOrigen.MODIFY;
      LinVtaPromoMan.RESET;
      LinVtaPromoMan.SETCURRENTKEY("Document Type","Document No.","Line No.");
      LinVtaPromoMan.SETRANGE("Document Type",SalesLineOrigen."Document Type");
      LinVtaPromoMan.SETRANGE("Document No.",SalesLineOrigen."Document No.");
      LinVtaPromoMan.SETRANGE("Promo Source Line No.",SalesLineOrigen."Line No.");
      LinVtaPromoMan.SETRANGE("Promoci¢n manual",TRUE);
      LinVtaPromoMan.MODIFYALL("Promo No.",SalesLineOrigen."Promo No.");
      // F-BAIN-0049
    END;

    PROCEDURE PrefacturacionCrearFacturaAlbaran@1170170015(SalesHeader@1170170003 : Record 36;SalesShptHeader@1170170004 : Record 110);
    VAR
      CabFact@1170170000 : Record 36;
      SalesGetShpt@1170170001 : Codeunit 64;
      LinAlbVta@1170170002 : Record 111;
      NoSeriesMgt@1170170005 : Codeunit 396;
    BEGIN
      //I-BAIN-0038
      //OJO faltan las cosas de carga
      IF NOT SalesHeader.Ship THEN EXIT;
      IF SalesHeader.Invoice THEN EXIT;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Order THEN EXIT;
      IF SalesShptHeader."No." = '' THEN EXIT;
      IF NOT SalesHeader."Asignar n§ factura" THEN EXIT;
      IF NOT CONFIRM(Text0050002,TRUE,SalesShptHeader."No.") THEN
        ERROR(Text7014501);
      CabFact."Document Type" := CabFact."Document Type"::Invoice;
      CabFact.INSERT(TRUE);
      CabFact.VALIDATE("Sell-to Customer No.",SalesShptHeader."Bill-to Customer No.");
      CabFact.VALIDATE("Posting Date",SalesShptHeader."Posting Date");

      CabFact.VALIDATE("Payment Terms Code",SalesHeader."Payment Terms Code");
      CabFact.VALIDATE("Payment Method Code",SalesHeader."Payment Method Code");
      CabFact.VALIDATE("Payment Discount %",SalesHeader."Payment Discount %");
      CabFact.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");//140708
      CabFact.VALIDATE("External Document No.",SalesHeader."External Document No.");//170708
      //Falta CabFact."Enviar factura en carga alb." := SalesHeader."Enviar factura en carga alb."; // 24044 ts

      IF (CabFact."No. Series" <> CabFact."Posting No. Series")
      THEN BEGIN
        CabFact."Posting No." := NoSeriesMgt.GetNextNo(CabFact."Posting No. Series",
                                 CabFact."Posting Date",TRUE);
      END;
      //Falta CabFact."N§ orden carga" := SalesShptHeader."N§ orden carga"; // BAIN-0026
      CabFact.MODIFY;
      //Falta RcComentarios.PasarComentarioAFctra(SalesHeader,CabFact);//BAIN-050608
      LinAlbVta.RESET;
      LinAlbVta.SETRANGE("Document No.",SalesShptHeader."No.");

      SalesGetShpt.SetSalesHeader(CabFact);
      SalesGetShpt.CreateInvLines(LinAlbVta);
      //F-BAIN-0038
    END;

    [EventSubscriber(Codeunit,80,OnAfterFinalizePostingOnBeforeCommit)]
    LOCAL PROCEDURE PrefacturacionCrearFacturaAlbaranOnAfterFinalizePostingOnBeforeCommit@1170170018(VAR SalesHeader@1170170000 : Record 36;VAR SalesShipmentHeader@1170170001 : Record 110;VAR SalesInvoiceHeader@1170170002 : Record 112;VAR SalesCrMemoHeader@1170170003 : Record 114;VAR ReturnReceiptHeader@1170170004 : Record 6660;VAR GenJnlPostLine@1170170005 : Codeunit 12;CommitIsSuppressed@1170170006 : Boolean;PreviewMode@1170170007 : Boolean);
    BEGIN
      //I-BAIN-0038
      PrefacturacionCrearFacturaAlbaran(SalesHeader,SalesShipmentHeader);
      //F-BAIN-0038
    END;

    [EventSubscriber(Codeunit,80,OnBeforePostSalesDoc)]
    LOCAL PROCEDURE PrefacturacionValidarAntesDeRegistrar@1170170019(VAR Sender@1170170000 : Codeunit 80;VAR SalesHeader@1170170001 : Record 36;CommitIsSuppressed@1170170002 : Boolean;PreviewMode@1170170003 : Boolean;VAR HideProgressWindow@1170170004 : Boolean);
    VAR
      Cust@1170170005 : Record 18;
    BEGIN
      //I-BAIN-0038
      WITH SalesHeader DO BEGIN
        IF NOT Cust.GET("Bill-to Customer No.") THEN
          EXIT;
        //I-BAIN-0022
        IF ("Document Type" = "Document Type"::Order) AND
          (Cust."Tipo facturaci¢n" = Cust."Tipo facturaci¢n"::"Factura por albar n")
        // B-BAIN-0038  AND (NOT Invoice) THEN
          AND (NOT (Invoice OR "Asignar n§ factura")) THEN // BAIN-0038
          IF NOT CONFIRM(Text0050001,FALSE,
                    Cust.FIELDCAPTION("Tipo facturaci¢n"),Cust."Tipo facturaci¢n") THEN
            ERROR(Text7014501);
        //F-BAIN-0022
      END;
      //F-BAIN-0038
    END;

    LOCAL PROCEDURE PrefacturacionConfirmarRegistrarPedidoSiNo@1170170030(VAR SalesHeader@1170170000 : Record 36;VAR HideDialog@1170170001 : Boolean;VAR IsHandled@1170170002 : Boolean;VAR DefaultOption@1170170003 : Integer);
    VAR
      ConfVtas@1170170005 : Record 311;
      Selection@1170170006 : Integer;
      Cliente@1170170007 : Record 18;
    BEGIN
      //I-BAIN-0038
      WITH SalesHeader DO BEGIN
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;
        "Asignar n§ factura" := FALSE;
        ConfVtas.GET;
        IF ConfVtas."Omitir facturar en pedido" THEN BEGIN
          IF "Posting No." <> '' THEN BEGIN
            IF CONFIRM(ConfFactura,TRUE,"Posting No.") THEN BEGIN
              Ship := FALSE;
              Invoice := TRUE;
              "Asignar n§ factura" := FALSE;
              Selection := 2;
            END ELSE
              Selection := 0;
          END ELSE BEGIN
            Cliente.GET("Sell-to Customer No.");
            IF Cliente."Tipo facturaci¢n" = Cliente."Tipo facturaci¢n"::"Factura por albar n" THEN
              Selection := STRMENU(ConfRegistro,2)
            ELSE
               Selection := STRMENU(ConfRegistro,1);
            Ship := TRUE;
            Invoice := FALSE;
            "Asignar n§ factura" := (Selection = 2);
          END;
          MODIFY;
          HideDialog := TRUE;
          IsHandled := (Selection = 0);
          EXIT;
        END;
        DefaultOption := 1;
      END;
      //F-BAIN-0038
    END;

    [EventSubscriber(Codeunit,81,OnBeforeConfirmSalesPost)]
    LOCAL PROCEDURE PrefacturacionAntesDelConfirmRegistrar@1170170034(VAR SalesHeader@1170170000 : Record 36;VAR HideDialog@1170170001 : Boolean;VAR IsHandled@1170170002 : Boolean;VAR DefaultOption@1170170003 : Integer;VAR PostAndSend@1170170004 : Boolean);
    BEGIN
      //I-BAIN-0038
      PrefacturacionConfirmarRegistrarPedidoSiNo(SalesHeader,HideDialog,IsHandled,DefaultOption);
      //F-BAIN-0038
    END;

    [EventSubscriber(Codeunit,82,OnBeforeConfirmPost)]
    LOCAL PROCEDURE PrefacturacionAntesDelConfirmRegistrarImprimir@1170170041(VAR SalesHeader@1170170000 : Record 36;VAR HideDialog@1170170001 : Boolean;VAR IsHandled@1170170002 : Boolean;VAR SendReportAsEmail@1170170003 : Boolean;VAR DefaultOption@1170170004 : Integer);
    BEGIN
      //I-BAIN-0038
      PrefacturacionConfirmarRegistrarPedidoSiNo(SalesHeader,HideDialog,IsHandled,DefaultOption);
      //F-BAIN-0038
    END;

    [EventSubscriber(Codeunit,82,OnBeforePrintShip)]
    LOCAL PROCEDURE PrefacturacionImprimirPrefacturaAntesAlbaran@1170170022(VAR SalesHeader@1170170000 : Record 36;SendReportAsEmail@1170170001 : Boolean;VAR IsHandled@1170170002 : Boolean);
    VAR
      CabFact@1170170003 : Record 36;
      SalesCalcDiscount@1170170004 : Codeunit 60;
      SalesLine@1170170005 : Record 37;
    BEGIN
      //I-BAIN-0038
      IF NOT PrefacturacionObtenerPrefactura(SalesHeader."Last Shipping No.",CabFact) THEN
        EXIT;
      CabFact.SETRECFILTER;
      SalesCalcDiscount.CalculateWithSalesHeader(CabFact,SalesLine);
      CabFact.FIND;
      //Falta REPORT.RUN(REPORT::"Prefactura ventas",FALSE,FALSE,CabFact);
      REPORT.RUN(REPORT::"Sales Document - Test",FALSE,FALSE,CabFact);//Quitar
      //Falta IF CabFact.FIND('-') THEN CabFact.ImprimirReciboSinRegistrar(FALSE);
    END;

    PROCEDURE PrefacturacionObtenerPrefactura@1170170027(NoAlbaran@1170170000 : Code[20];VAR PreFactura@1170170001 : Record 36) : Boolean;
    VAR
      SalesLine@1170170002 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETCURRENTKEY("Document Type","Shipment No.","Shipment Line No.");
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Shipment No.",NoAlbaran);
        IF NOT FINDFIRST THEN
          EXIT;
        EXIT(PreFactura.GET("Document Type","Document No."));
      END;
    END;

    [EventSubscriber(Codeunit,5815,OnBeforeCheckSalesShptLine)]
    PROCEDURE PrefacturacionValidarAnularAlbaran@1170170023(VAR SalesShipmentLine@1170170001 : Record 111;VAR IsHandled@1170170002 : Boolean;VAR SkipTestFields@1170170003 : Boolean;VAR SkipUndoPosting@1170170004 : Boolean;VAR SkipUndoInitPostATO@1170170005 : Boolean);
    VAR
      LinFact@1170170000 : Record 37;
    BEGIN
      //I-BAIN-0038
      LinFact.SETCURRENTKEY("Document Type","Shipment No.","Shipment Line No.");
      LinFact.SETRANGE("Document Type",LinFact."Document Type"::Invoice);
      LinFact.SETRANGE("Shipment No.",SalesShipmentLine."Document No.");
      LinFact.SETRANGE("Shipment Line No.",SalesShipmentLine."Line No.");
      IF LinFact.FIND('-') THEN
        ERROR(ErrExistePrefactura);
      //F-BAIN-0038
    END;

    BEGIN
    END.
  }
}

